                                                                                  TASK1: BASICS OF WEB DWVWLOPMENT

# üåê Basics of Web Development

## üß† Objective
Learn and apply foundational **HTML**, **CSS**, and **JavaScript** concepts to build a simple interactive webpage.

---

## üìã Project Overview

This project is divided into three key stages:

### 1Ô∏è‚É£ Create a Simple Webpage Using HTML
- **Objective**: Understand basic HTML elements and structure.
- **Actions**:
  - Use `<!DOCTYPE html>`, `<html>`, `<head>`, and `<body>`.
  - Add headings (`<h1>` to `<h6>`), paragraphs (`<p>`), images (`<img>`), and links (`<a>`).

### 2Ô∏è‚É£ Style the Webpage Using CSS
- **Objective**: Learn how to apply styling with CSS.
- **Actions**:
  - Add internal or external stylesheets.
  - Apply colors, fonts, margins, paddings, and layout techniques.

### 3Ô∏è‚É£ Add Basic JavaScript for Interactivity
- **Objective**: Implement simple interactions using JavaScript.
- **Actions**:
  - Create a button that triggers an alert message when clicked.

---

## üõ†Ô∏è Technologies Used
- HTML5
- CSS3
- JavaScript



                                                                                   TASK2 :  Intermediate HTML, CSS, and JavaScript 



## üéØ Objective
Enhance HTML and CSS skills, and learn **JavaScript for DOM manipulation** by building interactive and responsive web components.

---

## üß© Project Steps and Modules

### 1Ô∏è‚É£ Create a Contact Form Using HTML and CSS
- **Objective**: Build a form with various input fields.
- **Actions**:
  - Use form elements like `<input type="text">`, `<input type="email">`, `<textarea>`, and `<button type="submit">`.
  - Style the form using CSS for layout, colors, fonts, and spacing.

### 2Ô∏è‚É£ Add JavaScript Form Validation
- **Objective**: Ensure that form data is valid before submission.
- **Actions**:
  - Use JavaScript to check if required fields are filled.
  - Validate email format and show error messages if inputs are invalid.

### 3Ô∏è‚É£ Create a Responsive Layout Using Flexbox and CSS Grid
- **Objective**: Design a layout that adjusts across different screen sizes.
- **Actions**:
  - Use **Flexbox** for navbar or sidebars.
  - Use **CSS Grid** for the main content area.
  - Apply **media queries** for responsiveness on tablets and mobile devices.

### 4Ô∏è‚É£ Develop a Dynamic To-Do List or Image Gallery Using JavaScript
- **Objective**: Practice DOM manipulation.
- **Actions**:
  - Create a **To-Do List** where users can add or remove tasks dynamically  
    **or**  
    - Build an **Image Gallery** where users can add or remove images.

---

## üõ†Ô∏è Technologies Used
- **HTML5**
- **CSS3 (Flexbox & Grid)**
- **JavaScript (DOM Manipulation & Validation)**
